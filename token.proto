syntax = "proto3";
package token;
option go_package = "github.com/aefalcon/github-keystore-protobuf/go/tokenpb";
import "google/protobuf/timestamp.proto";

message Links {
    string app_tokens = 1;
    string install_tokens = 2;
}

message AppToken {
    uint64 app = 1;
    bytes token = 2;
    google.protobuf.Timestamp expiration = 3;
}

message InstallToken {
    uint64 app = 1;
    uint64 install = 2;
    bytes token = 3;
    google.protobuf.Timestamp expiration = 4;
}

message GetAppTokenRequest {
    uint64 app = 1;
}

message GetAppTokenResponse {
    AppToken token = 1;
}

message GetInstallTokenRequest {
    uint64 app = 1;
    uint64 install = 2;
}

message GetInstallTokenResponse {
    InstallToken token = 1;
}

message PutAppTokenRequest {
    AppToken token = 1;
}

message PutAppTokenResponse {
}

message PutInstallTokenRequest {
    InstallToken token = 1;
}

message PutInstallTokenResponse {
}

message DeleteAppTokenRequest {
    uint64 app = 1;
}

message DeleteAppTokenResponse{
}

message DeleteInstallTokenRequest {
    uint64 app = 1;
    uint64 install = 2;
}

message DeleteInstallTokenResponse{
}

service TokenStore {
    rpc GetAppToken(GetAppTokenRequest) returns (GetAppTokenResponse);
    rpc GetInstallToken(GetInstallTokenRequest) returns (GetInstallTokenResponse);
    rpc PutAppToken(PutAppTokenRequest) returns (PutAppTokenResponse);
    rpc PutInstallToken(PutInstallTokenRequest) returns (PutInstallTokenResponse);
    rpc DeleteAppToken(DeleteAppTokenRequest) returns (DeleteAppTokenResponse);
    rpc DeleteInstallToken(DeleteInstallTokenRequest) returns (DeleteInstallTokenResponse);
}

service InstallTokenService {
    rpc GetInstallToken(GetInstallTokenRequest) returns (GetInstallTokenResponse);
}